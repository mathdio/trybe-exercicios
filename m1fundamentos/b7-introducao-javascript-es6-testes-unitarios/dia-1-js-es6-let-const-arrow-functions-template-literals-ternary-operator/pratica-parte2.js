// Abaixo, vocÃª verÃ¡ algumas especificaÃ§Ãµes de algoritmos para desenvolver. Ã‰ fundamental que vocÃª utilize o que aprendeu sobre let, const, arrow functions, template literals e ternary operator.
// 1 - Crie uma funÃ§Ã£o que receba um nÃºmero e retorne seu fatorial. Na matemÃ¡tica, o fatorial de um nÃºmero inteiro e positivo N, representado por N!, Ã© o produto de todos os seus antecessores atÃ© o nÃºmero um. Exemplo: 4! = 4 * 3 * 2 * 1 = 24.
// BÃ´nus (opcional): tente fazer o mesmo exercÃ­cio de forma recursiva. Spoiler: Ã‰ possÃ­vel resolver com uma linha usando ternary operator.

const factorial = (number) => {
  let factorialNumber = 1;
  for (let i = number; i > 0; i -= 1) {
    factorialNumber *= i;
  }
  return factorialNumber;
};
console.log(factorial(10));

const recursiveFactorial = (number) => number > 1 ? number * recursiveFactorial(number - 1) : 1;
console.log(recursiveFactorial(10));

// 2 - Crie uma funÃ§Ã£o que receba uma frase e retorne a maior palavra.

const longestWord = (string) => {
  const array = string.split(' ');
  let biggestWord = array[0];
  for (let i = 1; i < array.length; i += 1) {
    if (array[i].length > biggestWord.length) {
      biggestWord = array[i];
    }
  }
  console.log(biggestWord);
  return biggestWord;
};
longestWord('AntÃ´nio foi no banheiro e nÃ£o sabemos o que aconteceu');

// 2 - ðŸš€ Crie duas funÃ§Ãµes JavaScript com as seguintes especificaÃ§Ãµes:
// NÃ£o se esqueÃ§a de usar template literals
// FunÃ§Ã£o 1: Escreva uma funÃ§Ã£o que substitua a letra 'x' em uma frase.
// A funÃ§Ã£o deverÃ¡ receber um nome por parÃ¢metro;
// Declare dentro da funÃ§Ã£o uma variÃ¡vel com o nome frase, do tipo const e com o valor igual a 'Tryber x aqui!';
// A funÃ§Ã£o deverÃ¡ retornar uma nova frase onde o x da frase 'Tryber x aqui!' seja substituÃ­do pelo nome passado por parÃ¢metro.
// Exemplo:
// ParÃ¢metro: 'Bebeto'
// Retorno: 'Tryber Bebeto aqui!'

const tryber = (nome) => {
  const phrase = `Tryber x aqui!`;
  const phraseArray = phrase.split(' ');
  for (let i = 0; i < phraseArray.length; i += 1) {
    if (phraseArray[i] === 'x') {
      phraseArray[i] = nome;
    }
  }
   return phraseArray.join(' ');
};

console.log(tryber('Matheus'));

// FunÃ§Ã£o 2: Escreva uma funÃ§Ã£o que irÃ¡ receber o retorno da FunÃ§Ã£o 1 por parÃ¢metro e retornarÃ¡ uma nova string.
// A funÃ§Ã£o deverÃ¡ receber o retorno da FunÃ§Ã£o 1 por parÃ¢metro;
// Declare dentro da funÃ§Ã£o uma variÃ¡vel com o nome skills, do tipo const;
// A variÃ¡vel skills deverÃ¡ ser um array contendo trÃªs strings com tecnologias que vocÃª jÃ¡ aprendeu.
// Concatene o valor retornado da FunÃ§Ã£o 1, a frase 'Minhas trÃªs principais habilidades sÃ£o:' e o valor da variÃ¡vel skills.
// Exemplo de retorno:
// Tryber Bebeto aqui!
// Minhas trÃªs principais habilidades sÃ£o:
// JavaScript
// HTML
// CSS

const tryberAbilities = (tryber) => {
  const skills = ['JS', 'HTML', 'CSS'];
  let result = `${tryber}
  Minhas trÃªs principais habilidades sÃ£o:`
  skills.forEach((skill) => {
    result = `${result}
    - ${skill}`;
  });
  return result;
};
console.log(tryberAbilities(tryber('Matheus')));;